name: CI

on: [push, pull_request]
# on:
#   push:
#     branches: [ master, gh-action ]
#   pull_request:
#     branches: [ master ]

jobs:
  windows-gcc:
    name: Windows ${{ matrix.compiler }} dbg=${{ matrix.debug }}
    runs-on: windows-latest
    timeout-minutes: 8
    strategy:
      fail-fast: false
      matrix:
        compiler: [g++]
        debug: ['false', 'true']

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v1
    - shell: cmd
      env:
        CXX: ${{ matrix.compiler }}
      run: |
        set CC=%CXX%
        python -m pip install ninja meson
        meson setup build -Dwarning_level=3 -Dmp_debug=${{ matrix.debug }} -Db_colorout=always
        type D:\a\jln.mp\jln.mp\build\meson-logs\meson-log.txt
        ninja -C build -k10

  windows-clang:
    name: Windows ${{ matrix.compiler }} dbg=${{ matrix.debug }}
    runs-on: windows-latest
    timeout-minutes: 8
    strategy:
      fail-fast: false
      matrix:
        compiler: [clang-cl]
        debug: ['false', 'true']

    steps:
    - uses: actions/checkout@v2
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install Python Dependencies
      run: pip install meson ninja
    - name: Prepare MSVC
      uses: bus1/cabuild/action/msdevshell@v1
      with:
        architecture: x64
    - shell: cmd
      env:
        CC: ${{ matrix.compiler }}
        CXX: ${{ matrix.compiler }}
      run: |
        meson setup build -Dcpp_winlibs= -Dwarning_level=3 -Dmp_debug=${{ matrix.debug }} -Db_colorout=always
        type D:\a\jln.mp\jln.mp\build\meson-logs\meson-log.txt
        ninja -C build -k10

  windows-cl:
    name: Windows ${{ matrix.compiler }} dbg=${{ matrix.debug }}
    runs-on: windows-latest
    timeout-minutes: 8
    strategy:
      fail-fast: false
      matrix:
        compiler: [cl]
        debug: ['false']

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v1
    - shell: cmd
      env:
        CC: ${{ matrix.compiler }}
        CXX: ${{ matrix.compiler }}
      run: |
        python -m pip install ninja meson
        meson setup --backend vs --vsenv -Dcpp_winlibs= -Dwarning_level=3 -Dmp_debug=${{ matrix.debug }} -Db_colorout=always build
        type D:\a\jln.mp\jln.mp\build\meson-logs\meson-log.txt
        meson -v -C build

  macos:
    name: MacOs clang dbg=${{ matrix.debug }}
    runs-on: macOS-latest
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        debug: ['false', 'true']

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v1
    - run: |
        python -m pip install ninja meson
        meson setup build -Dmp_debug=${{ matrix.debug }} -Db_colorout=always
        CLICOLOR_FORCE= ninja -C build -k10

  linux:
    name: Ubuntu ${{ matrix.cxx }} dbg=${{ matrix.debug }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    strategy:
      fail-fast: false
      matrix:
        debug: ['false', 'true']
        # https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2204-Readme.md
        cxx: ['g++-12', 'clang++-13', 'clang++-14']

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v1
    - run: |
        python -m pip install ninja meson
        CXX=${{ matrix.cxx }} meson setup build -Dmp_debug=${{ matrix.debug }} -Db_colorout=always
        CLICOLOR_FORCE= ninja -C build -k10

  linux-old:
    name: Ubuntu ${{ matrix.cxx }} dbg=${{ matrix.debug }}
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    strategy:
      fail-fast: false
      matrix:
        debug: ['false', 'true']
        cxx: ['g++-9', 'g++-10', 'clang++-10', 'clang++-11', 'clang++-12']

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v1
    - run: |
        python -m pip install ninja meson
        CXX=${{ matrix.cxx }} meson setup build -Dmp_debug=${{ matrix.debug }} -Db_colorout=always
        CLICOLOR_FORCE= ninja -C build -k10

  auto-gen:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: [linux, linux-old, macos, windows-cl, windows-clang, windows-gcc]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: leafo/gh-actions-lua@v8
      - uses: leafo/gh-actions-luarocks@v4

      - name: Cache luarocks
        id: cache-luarocks
        uses: actions/cache@v2
        with:
          path: |
            .luarocks
            ~/.luarocks
          key: ${{ runner.os }}-luarocks

      - name: Install LPeg
        if: steps.cache-luarocks.outputs.cache-hit != 'true'
        run: luarocks install lpeg

      - name: Build documentation
        run: |
          ./tools/docgen.lua \
            include/jln/mp/algorithm/* \
            include/jln/mp/functional/* \
            include/jln/mp/list/* \
            include/jln/mp/number/* \
            include/jln/mp/utility/* \
            include/jln/mp/value/* \
            > index.html

      - name: Build standalone header files
        run: |
          mkdir -p standalone/include/jln

          ./tools/amalgamated.lua include/jln/mp.hpp > standalone/include/jln/mp.hpp
          ./tools/amalgamated.lua include/jln/mp/smp.hpp > standalone/include/jln/smp.hpp

          for comp in g++-9 g++-10 g++-11 g++-12 clang++-12 clang++-13 clang++-14 ; do
            for basename in mp smp ; do
              $comp -std=c++17 -fsyntax-only -x c++ - <<<'#include "standalone/include/jln/'$basename'.hpp"'
            done
          done

      - uses: actions/checkout@v2
        with:
          ref: standalone
          path: standalone_repo

      - uses: actions/checkout@v2
        with:
          ref: gh-pages
          path: doc_repo

      - name: Push changes
        run: |
          mv standalone_repo/include/ standalone_old
          mv standalone/include standalone_repo/
          mv index.html doc_repo
          cp docs/default.css doc_repo

          i=0
          messages=('single header' 'html documentation')
          for repo_path in standalone_repo doc_repo ; do
            cd $repo_path
            if ! git diff --quiet ; then
              git config --global user.name 'Jonathan Poelen'
              git config --global user.email 'jonathan.poelen@gmail.com'
              git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
              git commit -am "update ${messages[$i]}"
              git push
            fi
            cd ..
            ((++i))
          done
