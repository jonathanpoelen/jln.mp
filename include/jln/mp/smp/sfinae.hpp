#pragma once

#include "functional/sfinaefwd.hpp"

namespace jln::mp
{
  using detail::sfinae;
  using detail::sfinae_once;
}

#include "algorithm/accumulate.hpp"
#include "algorithm/all_of.hpp"
#include "algorithm/any_of.hpp"
#include "algorithm/cartesian.hpp"
#include "algorithm/combine.hpp"
#include "algorithm/contains.hpp"
#include "algorithm/copy.hpp"
#include "algorithm/count.hpp"
#include "algorithm/find.hpp"
#include "algorithm/flatten.hpp"
#include "algorithm/fold_left.hpp"
#include "algorithm/fold_right.hpp"
#include "algorithm/group.hpp"
#include "algorithm/group_n.hpp"
#include "algorithm/index.hpp"
#include "algorithm/indices.hpp"
#include "algorithm/intersperse.hpp"
#include "algorithm/iota.hpp"
#include "algorithm/is_sorted.hpp"
#include "algorithm/is_unique.hpp"
#include "algorithm/lower_bound.hpp"
#include "algorithm/make_int_sequence.hpp"
#include "algorithm/matrix_shortest.hpp"
#include "algorithm/merge.hpp"
#include "algorithm/none_of.hpp"
#include "algorithm/partition.hpp"
#include "algorithm/permutations.hpp"
#include "algorithm/powerset.hpp"
#include "algorithm/remove_adjacent.hpp"
#include "algorithm/remove.hpp"
#include "algorithm/repeat.hpp"
#include "algorithm/replace.hpp"
#include "algorithm/reverse.hpp"
#include "algorithm/rotate.hpp"
#include "algorithm/same.hpp"
#include "algorithm/sort.hpp"
#include "algorithm/split_after.hpp"
#include "algorithm/split_at.hpp"
#include "algorithm/split_before.hpp"
#include "algorithm/split.hpp"
#include "algorithm/take_while.hpp"
#include "algorithm/transform.hpp"
#include "algorithm/unique.hpp"
#include "algorithm/upper_bound.hpp"
#include "algorithm/zip.hpp"
#include "assume.hpp"
#include "concepts.hpp"
#include "contract.hpp"
#include "functional/bind.hpp"
#include "functional/capture.hpp"
#include "functional/cascade.hpp"
#include "functional/compose.hpp"
#include "functional/each.hpp"
#include "functional/eval.hpp"
#include "functional/fix.hpp"
#include "functional/flip.hpp"
#include "functional/fork_front.hpp"
#include "functional/fork.hpp"
#include "functional/function.hpp"
#include "functional/identity.hpp"
#include "functional/if.hpp"
#include "functional/is_invocable.hpp"
#include "functional/partial_eager.hpp"
#include "functional/partial.hpp"
#include "functional/recurse.hpp"
#include "functional/sfinaefwd.hpp"
#include "list/append.hpp"
#include "list/as_list.hpp"
#include "list/at.hpp"
#include "list/back.hpp"
#include "list/drop.hpp"
#include "list/erase.hpp"
#include "list/front.hpp"
#include "list/insert.hpp"
#include "list/insert_range.hpp"
#include "list/is_empty.hpp"
#include "list/is_list.hpp"
#include "list/is_size_of.hpp"
#include "list/join.hpp"
#include "list/list.hpp"
#include "list/list_wrap_if.hpp"
#include "list/offset.hpp"
#include "list/pop_back.hpp"
#include "list/pop_front.hpp"
#include "list/prepend.hpp"
#include "list/push_back.hpp"
#include "list/push_front.hpp"
#include "list/range.hpp"
#include "list/size.hpp"
#include "list/slice.hpp"
#include "list/sliding.hpp"
#include "list/swap_index.hpp"
#include "list/take.hpp"
#include "number/as_bool.hpp"
#include "number/as_number.hpp"
#include "number/is_number.hpp"
#include "number/math.hpp"
#include "number/numbers.hpp"
#include "number/operators.hpp"
#include "number/to_bool.hpp"
#include "utility/always.hpp"
#include "utility/conditional.hpp"
#include "utility/has_type.hpp"
#include "utility/is_instance_of.hpp"
#include "utility/same_as.hpp"
#include "utility/traits.hpp"
#include "utility/unpack.hpp"
#include "value/as_val.hpp"
#include "value/has_value.hpp"
#include "value/is_val.hpp"
#include "value/operators.hpp"
#include "value/values.hpp"
